#include <stdio.h>
#include <unistd.h>
#include <string.h>

int clear_stdin()
{
	if ( getchar() == 255 )
		clear_stdin();
	return 0;
}

unsigned int get_unum()
{
	unsigned int val;

	fflush(stdout);
	scanf("%u", &val);
	clear_stdin();
	return val;
}

int read_number(int *tab)
{
	unsigned int tmp;
	unsigned int val;

	printf(" Index: ");

	tmp = get_unum();
	val = get_unum();
	printf(" Number at data[%u] is %u\n", tab[ val << 2 ], tmp);
	return 0;
}

int store_number(int *arg)
{
	unsigned int number;
	unsigned int index;
	unsigned int val;

	printf(" Number: ");
	number = get_unum();
	printf(" Index: ");
	index = get_unum();

	val = ( ( 0xaaaaaaab * index ) & ~( 0xffffffff ) ) >> 1;
	val = ( val * 3 ) - index;
	
	if ( val == 0 || ( number >> 24) == 183)
	{
		puts(" *** ERROR! ***");
		puts("   This index is reserved for wil!");
		puts(" *** ERROR! ***");
		return 1;
	}
	arg[ index << 2 ] = number;
	return 0;
}

int main(int argc, const char *argv[])
{
	char	*cmd;
	int		*ret;
	int		tab[400];

	bzero(&cmd, sizeof(cmd));
	bzero(&tab, sizeof(tab));

	puts("----------------------------------------------------\n  Welcome to wil's crappy number storage service!   \n----------------------------------------------------\n Commands:                                      \n    store - store a number into the data storage    \n  ");

	printf("Input command: ");
	while ( fgets(cmd, 440, stdin) )
	{
		if ( cmd == "store" )
			*ret = store_number(tab);
		if ( cmd == "read" )
			*ret = read_number(tab);
		if ( cmd == "exit" )
			return 0;
		if ( *ret == 0)
			printf(" Failed to do %s command\n", cmd);
		else 
			printf(" Completed %s command successfully\n", cmd);
		bzero(&cmd, sizeof(cmd));
	}

	return 1;
}
